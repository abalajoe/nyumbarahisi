<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1469457963352">{:repl-history {:ide [], :local [&quot;ls&quot; &quot;(subs 254717729123 3)&quot; &quot;(subs \&quot;254717729123\&quot; 3)&quot; &quot;(json/json-str :gender \&quot;male\&quot;)&quot; &quot;(ns ussd.httpclient\n  ^{:author \&quot;jabala\&quot;\n    :doc \&quot;HTTP Client\&quot;\n    :added \&quot;1.0\&quot;\n    }\n  (:require [org.httpkit.client :as http]\n            [ussd.utils.config :as config]\n            [clojure.data.json :as json]))&quot; &quot;(defn generate-target-list\n  \&quot;Function sends request to campaign management for target list generation\&quot;\n  [msisdn gender age location county status]\n  (let [options {:body (json/write-str (assoc {} :msisdn msisdn\n                                                 :gender gender :age age :location location :county county :status status))\n                 :body-encoding \&quot;UTF-8\&quot;\n                 :headers       {\&quot;Content-type\&quot; \&quot;text/plain\&quot;}}\n        request @(http/post \&quot;http://192.168.62.2:3018/api/targetlist/populate/fromsubs\&quot; options)]\n    (if (:error request)\n      (do (println \&quot;error: \&quot; (:error request)))\n      (do\n        (:body request)))))&quot; &quot;(defn generate-target-list\n  \&quot;Function sends request to campaign management for target list generation\&quot;\n  [msisdn gender age location county occupation]\n  (let [options {:body (json/write-str (assoc {} :msisdn msisdn\n                                                 :gender gender :age age :location location :county county :occupation occupation))\n                 :body-encoding \&quot;UTF-8\&quot;\n                 :headers       {\&quot;Content-type\&quot; \&quot;text/plain\&quot;}}\n        request @(http/post \&quot;http://192.168.62.2:3018/api/targetlist/populate/fromsubs\&quot; options)]\n    (if (:error request)\n      (do (println \&quot;error: \&quot; (:error request)))\n      (do\n        (:body request)))))&quot; &quot;(generate-target-list 0717729123 \&quot;male\&quot; 22 \&quot;nairobi\&quot; \&quot;nairobi\&quot; \&quot;student\&quot;)&quot; &quot;(defn generate-target-list\n  \&quot;Function sends request to campaign management for target list generation\&quot;\n  [msisdn gender age location county occupation]\n  (let [options {:body (json/write-str (assoc {} :msisdn msisdn\n                                                 :gender gender :age age :location location :county county :occupation occupation))\n                 :body-encoding \&quot;UTF-8\&quot;\n                 :headers       {\&quot;Content-type\&quot; \&quot;text/plain\&quot;}}\n        request @(http/post \&quot;http://192.168.62.2:3080/api/targetlist/populate/fromsubs\&quot; options)]\n    (if (:error request)\n      (do (println \&quot;error: \&quot; (:error request)))\n      (do\n        (:body request)))))&quot; &quot;(defn generate-target-list\n  \&quot;Function sends request to campaign management for target list generation\&quot;\n  [msisdn gender age location county occupation]\n  (let [options {:body (json/write-str (assoc {} :msisdn msisdn\n                                                 :gender gender :age age :location location :county county :occupation occupation))\n                 :body-encoding \&quot;UTF-8\&quot;\n                 :headers       {\&quot;Content-type\&quot; \&quot;application/json\&quot;}}\n        request @(http/post \&quot;http://192.168.62.2:3080/api/targetlist/populate/fromsubs\&quot; options)]\n    (if (:error request)\n      (do (println \&quot;error: \&quot; (:error request)))\n      (do\n        (:body request)))))&quot; &quot;(generate-target-list 717729123 \&quot;male\&quot; 22 \&quot;nairobi\&quot; \&quot;nairobi\&quot; \&quot;student\&quot;)&quot; &quot;(defn -main\n  \&quot;main entry of application\&quot;\n  [&amp; args]\n  (log/info \&quot;===================================================\&quot;)\n  (log/info \&quot;SIKIKA USSD ADAPTER API - VERSION 1.1.0\&quot;)\n  (log/info \&quot;===================================================\&quot;)\n\n  (config/load-configuration)                               ;; load configuration\n  (http/initialize-http )                                   ;; initialize http server\n  (session/initialize-session)                              ;; initialize session\n\n\n  ;; register runtime hook\n  (.addShutdownHook (Runtime/getRuntime) (Thread. end-program))\n\n  ;; start server\n  (try\n    (http/start-server)\n    (catch Exception e\n      (do\n        (log/error \&quot;start server E: \&quot; (.getMessage e))\n        ;; end program gracefully\n        (end-program)))))&quot; &quot;(defn voice-xml\n  \&quot;voice xml response\&quot;\n  [message audio-file]\n  (str \&quot;&lt;?xml version=\\\&quot;1.0\\\&quot; encoding=\\\&quot;UTF-8\\\&quot;?&gt;&lt;Response&gt;&lt;Say&gt;\&quot; message \&quot;&lt;/Say&gt;&lt;Play url=\\\&quot;http://197.248.0.204:3014/audio/\&quot; audio-file \&quot; /&gt;&lt;/Response&gt;\&quot;))&quot; &quot;(subs \&quot;343434\&quot; 3)&quot; &quot;(subs \&quot;+254725413458\&quot; 4)&quot; &quot;(defn voice-xml\n  \&quot;voice xml response\&quot;\n  [message audio-file]\n  (str \&quot;&lt;?xml version=\\\&quot;1.0\\\&quot; encoding=\\\&quot;UTF-8\\\&quot;?&gt;&lt;Response&gt;&lt;Say&gt;\&quot; message \&quot;&lt;/Say&gt;&lt;Play url=\\\&quot;http://197.248.0.204:3014/audio/\&quot; audio-file \&quot;/&gt;&lt;/Response&gt;\&quot;))&quot; &quot;(defn voice-xml\n  \&quot;voice xml response\&quot;\n  [message audio-file]\n  (str \&quot;&lt;?xml version=\\\&quot;1.0\\\&quot; encoding=\\\&quot;UTF-8\\\&quot;?&gt;&lt;Response&gt;&lt;Say&gt;\&quot; message \&quot;&lt;/Say&gt;&lt;Play url=\\\&quot;http://www.myvoicemailserver.com/audio/vmail.wav\\\&quot;/&gt;&lt;/Response&gt;\&quot;))&quot; &quot;parse-res&quot; &quot;(defn voice-xml\n  \&quot;voice xml response\&quot;\n  [message audio-file]\n  (str \&quot;&lt;?xml version=\\\&quot;1.0\\\&quot; encoding=\\\&quot;UTF-8\\\&quot;?&gt;&lt;Response&gt;&lt;Say&gt;\&quot; message \&quot;&lt;/Say&gt;&lt;Play url=\\\&quot;http://www.myvoicemailserver.com/audio/\&quot; audio-file \\\&quot;\&quot; /&gt;&lt;/Response&gt;\&quot;))&quot; &quot;(defn voice-xml\n  \&quot;voice xml response\&quot;\n  [message audio-file]\n  (str \&quot;&lt;?xml version=\\\&quot;1.0\\\&quot; encoding=\\\&quot;UTF-8\\\&quot;?&gt;&lt;Response&gt;&lt;Say&gt;\&quot; message \&quot;&lt;/Say&gt;&lt;Play url=\\\&quot;http://197.248.0.204:3014/audio/\&quot; audio-file \\\&quot; \&quot;/&gt;&lt;/Response&gt;\&quot;))&quot; &quot;(voice-xml \&quot;hello thank you\&quot; \&quot;naija.mp3\&quot;)&quot; &quot;(ns ussd.utils.util\n  ^{:author \&quot;jabala\&quot;\n    :doc \&quot;Helper Functions\&quot;\n    :added \&quot;1.0\&quot;\n    }\n  (:require [clojure.tools.logging :as log]\n            [ussd.httpclient :as client]\n            [ussd.session :as session]\n            [ussd.utils.config :as config]\n            [clojure.data.json :as json]))&quot; &quot;(defn unavailable-audion-voice-xml\n  \&quot;voice xml response for unavailable audio\&quot;\n  [message]\n  (str \&quot;&lt;?xml version=\\\&quot;1.0\\\&quot; encoding=\\\&quot;UTF-8\\\&quot;?&gt;&lt;Response&gt;&lt;Say&gt;\&quot; message \&quot;&lt;/Say&gt;&lt;/Response&gt;\&quot;))&quot; &quot;(defn double-audio-voice-xml\n  \&quot;voice xml response for two audion\&quot;\n  [message audio-file1 audio-file2]\n  (str \&quot;&lt;?xml version=\\\&quot;1.0\\\&quot; encoding=\\\&quot;UTF-8\\\&quot;?&gt;&lt;Response&gt;&lt;Say&gt;\&quot; message \&quot;&lt;/Say&gt;&lt;Play url=\\\&quot;http://197.248.0.204:3014/audio/\&quot; audio-file1 \\\&quot; \&quot;/&gt;&lt;Play url=\\\&quot;http://197.248.0.204:3014/audio/\&quot; audio-file2 \&quot; \\\&quot;/&gt;&lt;/Response&gt;\&quot;))&quot; &quot;(double-audio-voice-xml \&quot;hello thank you\&quot; \&quot;naija.mp3\&quot; \&quot;n.mp3\&quot;)&quot; &quot;(single-audio-voice-xml \&quot;hello thank you\&quot;)&quot; &quot;(unavailable-audion-voice-xml \&quot;hello thank you\&quot;)&quot; &quot;(def t  [{:campaigncost 1200.0, :files \&quot;Kenya Eng Sunlight Hula.mp3\&quot;, :listens 0, :msisdn \&quot;725413458\&quot;, :campaignid 103} {:campaigncost 20002.0, :files \&quot;Nivea Salon Dry Tvc.mp3\&quot;, :listens 0, :msisdn \&quot;725413458\&quot;, :campaignid 105}]\n  )&quot; &quot;(count t)&quot; &quot;(def tt  [{:campaigncost 20002.0, :files \&quot;Nivea Salon Dry Tvc.mp3\&quot;, :listens 0, :msisdn \&quot;725413458\&quot;, :campaignid 105}]\n  )&quot; &quot;(count tt)&quot; &quot;(second tt)&quot; &quot;(first tt)&quot; &quot;(first t)&quot; &quot;(second t)&quot; &quot;(defn -main\n  \&quot;main entry of application\&quot;\n  [&amp; args]\n  (log/info \&quot;===================================================\&quot;)\n  (log/info \&quot;SIKIKA USSD ADAPTER API - VERSION 1.1.0\&quot;)\n  (log/info \&quot;===================================================\&quot;)\n\n  (config/load-configuration)                               ;; load configuration\n  (http/initialize-http )                                   ;; initialize http server\n  (session/initialize-session)                              ;; initialize session\n  (println \&quot;1 \&quot; config/unavailable-audio-voice)\n  (println \&quot;2 \&quot; config/single-available-audio-voice)\n  (println \&quot;3 \&quot; config/double-available-audio-voice)\n\n  ;; register runtime hook\n  (.addShutdownHook (Runtime/getRuntime) (Thread. end-program))\n\n  ;; start server\n  (try\n    (http/start-server)\n    (catch Exception e\n      (do\n        (log/error \&quot;start server E: \&quot; (.getMessage e))\n        ;; end program gracefully\n        (end-program)))))&quot; &quot;(ns ussd.utils.config\n  ^{:author \&quot;jabala\&quot;\n    :doc \&quot;Load configurations\&quot;\n    :added \&quot;1.0\&quot;\n    }\n  (:require [propertea.core :as propertea]\n            [clojure.tools.logging :as log]))&quot; &quot;(def config \&quot;/opt/sikika/ussd/config.properties\&quot;)&quot; &quot;(def config \&quot;E:\\\\sikika\\\\ussdconfig.properties\&quot;)&quot; &quot;((propertea/read-properties config):port)&quot; &quot;(ns ussd.core (:gen-class)\n  ^{:author \&quot;jabala\&quot;\n    :doc \&quot;The Sikika USSD Service API\&quot;\n    :added \&quot;1.0\&quot;\n    }\n  (:require [clojure.tools.logging :as log]\n            [ussd.httpserver :as http]\n            [ussd.session :as session]\n            [ussd.utils.config :as config]))&quot; &quot;(defn end-program\n  \&quot;Function shuts application down gracefully\&quot;\n  []\n  ; stop server\n  (http/stop-server ))&quot; &quot;(defn -main\n  \&quot;main entry of application\&quot;\n  [&amp; args]\n  (log/info \&quot;===================================================\&quot;)\n  (log/info \&quot;SIKIKA USSD ADAPTER API - VERSION 1.1.0\&quot;)\n  (log/info \&quot;===================================================\&quot;)\n\n  (config/load-configuration)                               ;; load configuration\n  (http/initialize-http )                                   ;; initialize http server\n  (session/initialize-session)                              ;; initialize session\n\n  ;; register runtime hook\n  (.addShutdownHook (Runtime/getRuntime) (Thread. end-program))\n\n  ;; start server\n  (try\n    (http/start-server)\n    (catch Exception e\n      (do\n        (log/error \&quot;start server E: \&quot; (.getMessage e))\n        ;; end program gracefully\n        (end-program)))))&quot; &quot;(-main)&quot;], :remote []}}</component>
</project>